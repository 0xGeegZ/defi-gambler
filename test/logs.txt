  // it("LOG BASE", async () => {
  //   const alice = players[0]
  //   // **********
  //   // LOG BASE
  //   // **********
  //   let balanceAlice = await this.cake.balanceOf(alice)
  //   console.log(
  //     "ðŸš€ starting balance - Alice",
  //     ethers.utils.formatEther(balanceAlice.toString())
  //   )

  //   // token.increaseAllowance(receiver.address, 1000)
  //   // await this.cake.approve(this.chef.address, "100", { from: alice })

  //   await this.cake.approve(this.game.address, ethers.utils.parseEther("1"), {
  //     from: alice
  //   })

  //   value = ethers.utils.parseUnits("1", 18)

  //   let numerator = await this.game.numerator(value)
  //   numerator = ethers.utils.formatEther(numerator.toString())

  //   let denominator = await this.game.denominator()
  //   denominator = ethers.utils.formatEther(denominator.toString())

  //   let getInvested = await this.game.getInvested()
  //   getInvested = ethers.utils.formatEther(getInvested.toString())

  //   let getTotalBalance = await this.game.getTotalBalance()
  //   getTotalBalance = ethers.utils.formatEther(getTotalBalance.toString())

  //   let balanceSirup = await this.syrup.balanceOf(this.game.address)
  //   balanceSirup = ethers.utils.formatEther(balanceSirup.toString())

  //   let balanceCake = await this.cake.balanceOf(this.game.address)
  //   balanceCake = ethers.utils.formatEther(balanceCake.toString())

  //   console.log("===============================")
  //   console.log("ðŸš€ get Contract Invested", getInvested)
  //   console.log("ðŸš€ get Contract Total Balance", getTotalBalance)
  //   console.log("ðŸš€ get Contract Syrup Balance", balanceSirup.toString())
  //   console.log("ðŸš€ get Contract Cake Balance", balanceCake.toString())

  //   console.log(`${numerator} <= ${denominator} : ${numerator <= denominator}`)
  //   console.log("===============================")

  //   console.log("ðŸš€ betting 1 Cakes ")

  //   await this.game.bet(value, {
  //     from: alice
  //   })
  //   balanceAlice = await this.cake.balanceOf(alice)
  //   console.log(
  //     "ðŸš€ balance - Alice",
  //     ethers.utils.formatEther(balanceAlice.toString())
  //   )

  //   getInvested = await this.game.getInvested()
  //   getInvested = ethers.utils.formatEther(getInvested.toString())

  //   getTotalBalance = await this.game.getTotalBalance()
  //   getTotalBalance = ethers.utils.formatEther(getTotalBalance.toString())

  //   balanceSirup = await this.syrup.balanceOf(this.game.address)
  //   balanceSirup = ethers.utils.formatEther(balanceSirup.toString())

  //   balanceCake = await this.cake.balanceOf(this.game.address)
  //   balanceCake = ethers.utils.formatEther(balanceCake.toString())

  //   console.log("===============================")
  //   console.log("ðŸš€ get Contract Invested", getInvested)
  //   console.log("ðŸš€ get Contract Total Balance", getTotalBalance)
  //   console.log("ðŸš€ get Contract Syrup Balance", balanceSirup.toString())
  //   console.log("ðŸš€ get Contract Cake Balance", balanceCake.toString())
  //   console.log("===============================")

  //   const getLastBet = await this.game.getLastBet({ from: alice })
  //   console.log(`ðŸš€ getLastBet :
  //   playerAddress : ${getLastBet["0"]}
  //   amountBetted : ${getLastBet["1"]}
  //   numberRolled : ${getLastBet["2"]}
  //   winAmount : ${ethers.utils.formatEther(getLastBet["3"].toString())}
  //   isClaimed : ${getLastBet["4"]}
  //   isWinned : ${getLastBet["5"]}
  //   timelock : ${getLastBet["6"]} `)
  //   // from : ${getLastBet["7"]}
  //   // to :${ethers.utils.formatEther(getLastBet["8"].toString())}
  //   // bonus : ${ethers.utils.formatEther(getLastBet["9"].toString())}
  //   // bonus : ${getLastBet["9"]}

  //   // to : ${getLastBet["8"]}
  //   //TODO manage loose case
  //   await this.game.claimBonus({ from: alice })
  //   balanceAlice = await this.cake.balanceOf(alice)
  //   console.log(
  //     "ðŸš€ balance after claim winned amount - Alice",
  //     ethers.utils.formatEther(balanceAlice.toString())
  //   )
  //   console.log("advanceBlockTo - 1 minutes")
  //   //TODO create getter & setter for minTimeToWithdraw = 604800
  //   await time.increase(60 * 60 * 24 * 10)

  //   //claimBet
  //   await this.game.claimBet({ from: alice })
  //   // divest = ethers.utils.formatEther(divest.toString())
  //   // console.log("ðŸš€ divest amount - Alice", JSON.stringify(divest))

  //   balanceAlice = await this.cake.balanceOf(alice)
  //   balanceAlice = ethers.utils.formatEther(balanceAlice.toString())

  //   console.log("ðŸš€ balance after unstacking bet amount - Alice", balanceAlice)

  //   //check contract bankroll
  //   getInvested = await this.game.getInvested()
  //   getInvested = ethers.utils.formatEther(getInvested.toString())
  //   console.log("ðŸš€ get Contract Invested", getInvested)

  //   getTotalBalance = await this.game.getTotalBalance()
  //   getTotalBalance = ethers.utils.formatEther(getTotalBalance.toString())
  //   console.log("ðŸš€ get Contract Total Balance", getTotalBalance)

  //   //TODO ERROR
  //   let getHouseProfit = await this.game.getHouseProfit()
  //   console.log(
  //     "ðŸš€ get Contract Total Total Profit",
  //     JSON.stringify(getHouseProfit)
  //   )
  //   getHouseProfit = ethers.utils.formatEther(getHouseProfit.toString())
  //   console.log("ðŸš€ get Contract Total Total Profit", getHouseProfit)

  //   // **********
  //   // ENDLOG BASE
  //   // **********
  // })









  // it("should enter 100 time in game and have coherent stats", async () => {
  //   let value = ethers.utils.parseEther("1")

  //   let player
  //   let i
  //   let counter = 0
  //   let wins = 0
  //   let looses = 0
  //   for (i = 0; i < players.length; i++) {
  //     if (counter == 100) {
  //       await this.game.pause({
  //         from: minter
  //       })
  //       await this.game.forceDivestOfAllInvestors({
  //         from: minter
  //       })
  //       await this.game.unpause({
  //         from: minter
  //       })
  //       break
  //     }

  //     if (i == MAX_INVESTORS) {
  //       // console.log(`**********************************`)
  //       console.log(`divest all investors`)
  //       //pause and divest all players
  //       await this.game.pause({
  //         from: minter
  //       })
  //       await this.game.forceDivestOfAllInvestors({
  //         from: minter
  //       })
  //       await this.game.unpause({
  //         from: minter
  //       })
  //       getInvestors = await this.game.getInvestors()
  //       // console.log("ðŸš€ [AFTER DIVEST] getInvestors", getInvestors.toString())

  //       i = 0

  //       //TMP
  //       // break
  //     }

  //     player = players[i]
  //     // console.log(`ðŸš€ launching game for player ${i} : ${player}`)

  //     await this.cake.approve(this.game.address, value, {
  //       from: player
  //     })

  //     await this.game.bet(value, {
  //       from: player
  //     })

  //     const getLastBet = await this.game.getLastBet({ from: player })

  //     if (getLastBet["5"]) {
  //       await time.increase(60 * 60 * 24 * 1)

  //       //claimBet
  //       await this.game.claimBet({ from: player })
  //       wins++
  //     } else looses++

  //     console.log(
  //       `${getLastBet["5"] ? "winned" : "loosed"} game for player ${counter}`
  //     )

  //     counter++
  //     // if (!getLastBet[5]) break
  //   }

  //   console.log(`**********************************`)
  //   console.log(
  //     `END : iterations : ${counter} - win ratio ${wins} - loose ratio ${looses}`
  //   )
  //   console.log(`**********************************`)

  //   //check contract bankroll
  //   // let getInvested = await this.game.getInvested()
  //   getInvested = await this.game.getInvested()
  //   getInvested = ethers.utils.formatEther(getInvested.toString())
  //   console.log("ðŸš€ get Contract CURRENTLY Invested", getInvested)

  //   // let getAmountTotal = await this.game.getAmountTotal()
  //   getAmountTotal = await this.game.getAmountTotal()
  //   getAmountTotal = ethers.utils.formatEther(getAmountTotal.toString())
  //   console.log("ðŸš€ get Contract TOTAL Invested", getAmountTotal)

  //   // let getTotalBalance = await this.game.getTotalBalance()
  //   getTotalBalance = await this.game.getTotalBalance()
  //   getTotalBalance = ethers.utils.formatEther(getTotalBalance.toString())
  //   // console.log("ðŸš€ get Contract Total Balance", getTotalBalance)

  //   // await this.game.unstakeAll({
  //   //   from: minter
  //   // })
  //   let getTotalBalanceDetails = await this.game.getTotalBalanceDetails({
  //     from: minter
  //   })

  //   console.log("ðŸš€ ðŸš€ ðŸš€ ðŸš€ ðŸš€ ðŸš€ ðŸš€ ðŸš€ ðŸš€ ðŸš€ ðŸš€ ðŸš€")
  //   console.log(`ðŸš€ Get Contract Total Total Balance Detailed :
  //   TOTAL : ${getTotalBalance}
  //   DETAILS :
  //    contractBalance : ${ethers.utils.formatEther(
  //      getTotalBalanceDetails["0"].toString()
  //    )}
  //    balanceOfStakedWant : ${ethers.utils.formatEther(
  //      getTotalBalanceDetails["1"].toString()
  //    )}
  //    balanceOfPendingWant : ${ethers.utils.formatEther(
  //      getTotalBalanceDetails["2"].toString()
  //    )}`)

  //   // let getHouseProfit = await this.game.getHouseProfit()
  //   getHouseProfit = await this.game.getHouseProfit()
  //   getHouseProfit = ethers.utils.formatEther(getHouseProfit.toString())
  //   console.log("ðŸš€ Get Contract Total Total Profit", getHouseProfit)
  //   console.log("ðŸš€ ðŸš€ ðŸš€ ðŸš€ ðŸš€ ðŸš€ ðŸš€ ðŸš€ ðŸš€ ðŸš€ ðŸš€ ðŸš€")
  // })




  









    // it("Tests", async () => {
  //   let balanceAlice = await this.cake.balanceOf(alice)
  //   console.log("ðŸš€ balanceAlice", balanceAlice.toString())

  //   await this.cake.approve(this.chef.address, "100", { from: alice })

  //   console.log("enterStaking - 25")

  //   await this.chef.enterStaking("25", { from: alice })

  //   let balanceSirup = await this.syrup.balanceOf(alice)
  //   console.log("ðŸš€ balanceSirup", balanceSirup.toString())

  //   balanceAlice = await this.cake.balanceOf(alice)
  //   console.log("ðŸš€ balanceAlice", balanceAlice.toString())

  //   //https://docs.openzeppelin.com/test-helpers/0.5/api#time
  //   // console.log("advanceBlockTo - 10")
  //   // await time.advanceBlockTo("1")
  //   // balanceAlice = await this.cake.balanceOf(alice)
  //   // console.log("ðŸš€ balanceAlice", balanceAlice.toString())

  //   console.log("leaveStaking - 25")

  //   await this.chef.leaveStaking("25", { from: alice })
  //   balanceSirup = await this.syrup.balanceOf(alice)
  //   console.log("ðŸš€ balanceSirup", balanceSirup.toString())

  //   balanceAlice = await this.cake.balanceOf(alice)
  //   console.log("ðŸš€ balanceAlice", balanceAlice.toString())
  // })